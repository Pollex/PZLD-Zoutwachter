From 8f78b5fcef2c3ee26f4c9e7f1d54711a08d4c7d2 Mon Sep 17 00:00:00 2001
From: Tim van Osch <timvanosch@pollex.nl>
Date: Thu, 31 Oct 2024 11:51:49 +0100
Subject: [PATCH] Feat(i2c): experimental i2c slave

---
 .../common/stm32/include/cfg_i2c1_pb6_pb7.h   |  19 ++
 cpu/stm32/include/periph/cpu_i2c.h            |  12 +
 cpu/stm32/periph/i2c_1.c                      | 215 +++++++++++++++++-
 drivers/include/periph/i2c.h                  |  53 +++++
 drivers/periph_common/i2c.c                   |  28 +++
 tests/periph/i2c/main.c                       |  71 ++++++
 6 files changed, 387 insertions(+), 11 deletions(-)

diff --git a/boards/common/stm32/include/cfg_i2c1_pb6_pb7.h b/boards/common/stm32/include/cfg_i2c1_pb6_pb7.h
index cf239ba619..722ab7a04f 100644
--- a/boards/common/stm32/include/cfg_i2c1_pb6_pb7.h
+++ b/boards/common/stm32/include/cfg_i2c1_pb6_pb7.h
@@ -25,6 +25,23 @@
 extern "C" {
 #endif
 
+/*
+ *  If you want to initialise I2C1 as slave, add this define in the makefile
+ *  of your application.
+ *  -DI2C1_MODE=I2C_MODE_SLAVE
+ */
+#ifndef I2C1_MODE
+#define I2C1_MODE   (I2C_MODE_MASTER)
+#endif
+
+/*
+ *  Overwrite the slave addr of the device
+ *  -DI2C1_SLAVE_ADDR=42
+ */
+#ifndef I2C1_SLAVE_ADDR
+#define I2C1_SLAVE_ADDR   (0x12)
+#endif
+
 /**
  * @name I2C configuration
  * @{
@@ -33,6 +50,8 @@ static const i2c_conf_t i2c_config[] = {
     {
         .dev            = I2C1,
         .speed          = I2C_SPEED_NORMAL,
+        .mode           = I2C1_MODE,
+        .slave_addr     = I2C1_SLAVE_ADDR,
         .scl_pin        = GPIO_PIN(PORT_B, 6),
         .sda_pin        = GPIO_PIN(PORT_B, 7),
 #if CPU_FAM_STM32L4
diff --git a/cpu/stm32/include/periph/cpu_i2c.h b/cpu/stm32/include/periph/cpu_i2c.h
index 53f864faad..1489b0afce 100644
--- a/cpu/stm32/include/periph/cpu_i2c.h
+++ b/cpu/stm32/include/periph/cpu_i2c.h
@@ -74,12 +74,24 @@ typedef enum {
 /** @} */
 #endif /* ndef DOXYGEN */
 
+/**
+ * @brief   Default i2c mode
+ * @{
+ */
+typedef enum {
+  I2C_MODE_MASTER,
+  I2C_MODE_SLAVE
+} i2c_mode_t;
+/** @} */
+
 /**
  * @brief   Structure for I2C configuration data
  */
 typedef struct {
     I2C_TypeDef *dev;       /**< i2c device */
     i2c_speed_t speed;      /**< i2c bus speed */
+    i2c_mode_t mode;        /**< i2c bus mode */
+    uint16_t slave_addr;    /**< i2c addr for slave mode */
     gpio_t scl_pin;         /**< scl pin number */
     gpio_t sda_pin;         /**< sda pin number */
 #ifndef CPU_FAM_STM32F1
diff --git a/cpu/stm32/periph/i2c_1.c b/cpu/stm32/periph/i2c_1.c
index d656d89ae1..e100fc257e 100644
--- a/cpu/stm32/periph/i2c_1.c
+++ b/cpu/stm32/periph/i2c_1.c
@@ -71,7 +71,6 @@
 static uint32_t hsi_state;
 
 /* static function definitions */
-static inline void _i2c_init(I2C_TypeDef *i2c, uint32_t timing);
 static int _write(I2C_TypeDef *i2c, uint16_t addr, const void *data,
                   size_t length, uint8_t flags, uint32_t cr2_flags);
 static int _i2c_start(I2C_TypeDef *i2c, uint32_t cr2, uint8_t flags);
@@ -84,15 +83,13 @@ static inline int _wait_for_bus(I2C_TypeDef *i2c);
  */
 static mutex_t locks[I2C_NUMOF];
 
-void i2c_init(i2c_t dev)
+static void _i2c_init_common(i2c_t dev)
 {
     assert(dev < I2C_NUMOF);
 
     DEBUG("[i2c] init: initializing device\n");
     mutex_init(&locks[dev]);
 
-    I2C_TypeDef *i2c = i2c_config[dev].dev;
-
     periph_clk_en(i2c_config[dev].bus, i2c_config[dev].rcc_mask);
 
     NVIC_SetPriority(i2c_config[dev].irqn, I2C_IRQ_PRIO);
@@ -111,8 +108,11 @@ void i2c_init(i2c_t dev)
     gpio_init_af(i2c_config[dev].scl_pin, i2c_config[dev].scl_af);
     gpio_init(i2c_config[dev].sda_pin, GPIO_OD_PU);
     gpio_init_af(i2c_config[dev].sda_pin, i2c_config[dev].sda_af);
+}
 
-    DEBUG("[i2c] init: configuring device\n");
+static void _i2c_init_timing(i2c_t dev, I2C_TypeDef *i2c)
+{
+    DEBUG("[i2c] init: configuring timing\n");
     /* set the timing register value from predefined values */
     i2c_timing_param_t tp = timing_params[i2c_config[dev].speed];
     uint32_t timing = (( (uint32_t)tp.presc << I2C_TIMINGR_PRESC_Pos) |
@@ -120,13 +120,18 @@ void i2c_init(i2c_t dev)
                        ( (uint32_t)tp.sdadel << I2C_TIMINGR_SDADEL_Pos) |
                        ( (uint16_t)tp.sclh << I2C_TIMINGR_SCLH_Pos) |
                        tp.scll);
-    _i2c_init(i2c, timing);
+
+     /* set timing registers */
+     i2c->TIMINGR = timing;
 }
 
-static void _i2c_init(I2C_TypeDef *i2c, uint32_t timing)
+static void _i2c_init_master(i2c_t dev)
 {
+    I2C_TypeDef *i2c = i2c_config[dev].dev;
     assert(i2c != NULL);
 
+    DEBUG("[i2c] init: configuring as master\n");
+
     /* disable device */
     i2c->CR1 &= ~(I2C_CR1_PE);
 
@@ -136,8 +141,7 @@ static void _i2c_init(I2C_TypeDef *i2c, uint32_t timing)
     /* configure digital noise filter */
     i2c->CR1 |= I2C_CR1_DNF;
 
-    /* set timing registers */
-    i2c->TIMINGR = timing;
+    _i2c_init_timing(dev, i2c);
 
     /* configure clock stretching */
     i2c->CR1 &= ~(I2C_CR1_NOSTRETCH);
@@ -149,6 +153,60 @@ static void _i2c_init(I2C_TypeDef *i2c, uint32_t timing)
     i2c->CR1 |= I2C_CR1_PE;
 }
 
+static void _i2c_init_slave(i2c_t dev)
+{
+    uint16_t addr = i2c_config[dev].slave_addr;
+    I2C_TypeDef *i2c = i2c_config[dev].dev;
+    assert(i2c != NULL);
+
+    DEBUG("[i2c] init: configuring as slave with addr=0x%02X\n", addr);
+
+    /* disable device */
+    i2c->CR1 &= ~(I2C_CR1_PE);
+
+    /* configure analog noise filter */
+    i2c->CR1 |= I2C_CR1_ANFOFF;
+
+    /* configure digital noise filter */
+    i2c->CR1 |= I2C_CR1_DNF;
+
+    _i2c_init_timing(dev, i2c);
+
+    /* configure clock stretching */
+    i2c->CR1 &= ~(I2C_CR1_NOSTRETCH);
+
+    /* configure slave addr (7 bits) */
+    i2c->OAR1 &= ~(I2C_OAR1_OA1EN);
+    i2c->OAR1 &= ~(I2C_OAR1_OA1);
+    i2c->OAR1 |= ((addr & 0x7F) << 1);
+    i2c->OAR1 |= I2C_OAR1_OA1EN;
+
+    /* Various conf */
+    i2c->CR1 |= I2C_CR1_ERRIE | I2C_CR1_ADDRIE | I2C_CR1_RXIE | I2C_CR1_TXIE | I2C_CR1_STOPIE;
+    //i2c->CR2 |= I2C_CR2_RELOAD;
+
+    /* Clear interrupt */
+    i2c->ICR |= CLEAR_FLAG;
+
+    /* enable device */
+    i2c->CR1 |= I2C_CR1_PE;
+}
+
+void i2c_init(i2c_t dev)
+{
+
+    if (i2c_config[dev].mode == I2C_MODE_MASTER) {
+      _i2c_init_common(dev);
+      _i2c_init_master(dev);
+    } else if (i2c_config[dev].mode == I2C_MODE_SLAVE) {
+      _i2c_init_common(dev);
+      _i2c_init_slave(dev);
+    } else {
+      DEBUG("[i2c] init: unknown mode %d\n", i2c_config[dev].mode);
+      core_panic(PANIC_GENERAL_ERROR, "I2C FAULT");
+    }
+}
+
 void i2c_acquire(i2c_t dev)
 {
     assert(dev < I2C_NUMOF);
@@ -430,9 +488,143 @@ static inline void irq_handler(i2c_t dev)
     assert(dev < I2C_NUMOF);
 
     I2C_TypeDef *i2c = i2c_config[dev].dev;
-
     unsigned state = i2c->ISR;
-    DEBUG("\n\n### I2C ERROR OCCURRED ###\n");
+
+    if (i2c_slave_fsm == NULL && state & I2C_ISR_ADDR) {
+      /* restart device, generate error for master */
+      i2c->CR1 &= ~(I2C_CR1_PE);
+      i2c->CR1 |= I2C_CR1_PE;
+      return;
+    }
+
+    if (i2c_slave_fsm != NULL) {
+      /*
+       * ADDR received, It's can be :
+       * - The start of a new transaction, or
+       * - The second part of a read
+       */
+      if (state & I2C_ISR_ADDR) {
+          bool read = (i2c->ISR & I2C_ISR_DIR) != 0;
+
+          if (i2c_slave_fsm->state == I2C_SLAVE_STATE_WAIT_RW) {
+            size_t len = i2c_slave_fsm->prepare(read, i2c_slave_fsm->reg_addr, &i2c_slave_fsm->data, i2c_slave_fsm->arg);
+            if (len > 0) {
+              i2c_slave_fsm->state = read ? I2C_SLAVE_STATE_READING : I2C_SLAVE_STATE_WRITING;
+              i2c_slave_fsm->len = len;
+            } else {
+              /* prepare report an error */
+              /* restart i2c and fsm, generate error for master */
+              i2c_slave_reset_fsm(i2c_slave_fsm);
+              i2c->CR1 &= ~(I2C_CR1_PE);
+              i2c->CR1 |= I2C_CR1_PE;
+            }
+          } else if (i2c_slave_fsm->state == I2C_SLAVE_STATE_IDLE) {
+            if (read) {
+              /* First access must be a write to annonce the register addr */
+              /* restart i2c and fsm, generate error for master */
+              i2c_slave_reset_fsm(i2c_slave_fsm);
+              i2c->CR1 &= ~(I2C_CR1_PE);
+              i2c->CR1 |= I2C_CR1_PE;
+            } else {
+              i2c_slave_fsm->state = I2C_SLAVE_STATE_WAIT_REG_ADDR1;
+            }
+          } else {
+            /* restart i2c and fsm, generate error for master */
+            i2c_slave_reset_fsm(i2c_slave_fsm);
+            i2c->CR1 &= ~(I2C_CR1_PE);
+            i2c->CR1 |= I2C_CR1_PE;
+            return;
+          }
+
+
+          // Enter one by one byte mode
+          i2c->CR2 &= ~I2C_CR2_NBYTES_Msk;
+          i2c->CR2 |= (1 << I2C_CR2_NBYTES_Pos);
+
+          // Clear IRQ
+          i2c->ICR |= I2C_ICR_ADDRCF;
+
+          return;
+      }
+
+      // I2C controller: TX buffer is empty
+      if (state & I2C_ISR_TXIS) {
+        if (i2c_slave_fsm->state == I2C_SLAVE_STATE_READING) {
+          if (i2c_slave_fsm->index < i2c_slave_fsm->len) {
+            i2c->TXDR = i2c_slave_fsm->data[i2c_slave_fsm->index];
+            i2c_slave_fsm->index++;
+          } else {
+            // Tx buffer overflow, the master read too much data
+            i2c->TXDR = 0xFF;
+          }
+        }
+
+        return;
+      }
+
+      if (state & I2C_ISR_RXNE) {
+        if (i2c_slave_fsm->state == I2C_SLAVE_STATE_WAIT_RW) {
+          size_t len = i2c_slave_fsm->prepare(0, i2c_slave_fsm->reg_addr, &i2c_slave_fsm->data, i2c_slave_fsm->arg);
+          if (len > 0) {
+            i2c_slave_fsm->state = I2C_SLAVE_STATE_WRITING;
+            i2c_slave_fsm->len = len;
+          } else {
+            /* prepare report an error */
+            /* restart i2c and fsm, generate error for master */
+            i2c_slave_reset_fsm(i2c_slave_fsm);
+            i2c->CR1 &= ~(I2C_CR1_PE);
+            i2c->CR1 |= I2C_CR1_PE;
+          }
+        }
+
+        if (i2c_slave_fsm->state == I2C_SLAVE_STATE_WAIT_REG_ADDR1) {
+          i2c_slave_fsm->reg_addr = I2C1->RXDR;
+
+          if (i2c_slave_fsm->flags & I2C_REG16) {
+            i2c_slave_fsm->state = I2C_SLAVE_STATE_WAIT_REG_ADDR2;
+          } else {
+            i2c_slave_fsm->state = I2C_SLAVE_STATE_WAIT_RW;
+          }
+        } else if (i2c_slave_fsm->state == I2C_SLAVE_STATE_WAIT_REG_ADDR2) {
+          i2c_slave_fsm->reg_addr = (i2c_slave_fsm->reg_addr << 8) | (I2C1->RXDR & 0xFF);
+          i2c_slave_fsm->state = I2C_SLAVE_STATE_WAIT_RW;
+        }
+        else if (i2c_slave_fsm->state == I2C_SLAVE_STATE_WRITING) {
+          if (i2c_slave_fsm->index < i2c_slave_fsm->len) {
+            i2c_slave_fsm->data[i2c_slave_fsm->index] = I2C1->RXDR;
+            i2c_slave_fsm->index++;
+          } else {
+            // Rx buffer overflow, the master write too much data
+            (void) I2C1->RXDR;
+          }
+        }
+
+        return;
+      }
+
+      /*
+       * STOP received, the current i2c transaction is done.
+       */
+      if (state & I2C_ISR_STOPF) {
+        // Acknowledge STOP
+        i2c->ICR |= I2C_ICR_STOPCF;
+
+        // Flush TX buffer
+        i2c->ISR |= I2C_ISR_TXE;
+
+        // Notify end of transaction
+        if (i2c_slave_fsm->finish != NULL) {
+          i2c_slave_fsm->finish(i2c_slave_fsm->state == I2C_SLAVE_STATE_READING, i2c_slave_fsm->reg_addr, i2c_slave_fsm->index, i2c_slave_fsm->arg);
+        }
+
+        // Reset FSM
+        i2c_slave_reset_fsm(i2c_slave_fsm);
+        return;
+      }
+    }
+
+
+    DEBUG("\n\n### I2C ERROR OCCURED ###\n");
     DEBUG("status: %08x\n", state);
     if (state & I2C_ISR_OVR) {
         DEBUG("OVR\n");
@@ -455,6 +647,7 @@ static inline void irq_handler(i2c_t dev)
     if (state & I2C_ISR_ALERT) {
         DEBUG("SMBALERT\n");
     }
+
     core_panic(PANIC_GENERAL_ERROR, "I2C FAULT");
 }
 
diff --git a/drivers/include/periph/i2c.h b/drivers/include/periph/i2c.h
index c0b7abccbb..a1314c05c1 100644
--- a/drivers/include/periph/i2c.h
+++ b/drivers/include/periph/i2c.h
@@ -269,6 +269,59 @@ gpio_t i2c_pin_sda(i2c_t dev);
  */
 gpio_t i2c_pin_scl(i2c_t dev);
 #endif /* DOXYGEN */
+ /* @brief  Types definitiçon for I2C slave */
+ /** @{ */
+typedef uint8_t (*i2c_salve_prepare_callback_t) (bool read, uint16_t addr, uint8_t **data, void *arg);
+typedef void (*i2c_salve_finish_callback_t) (bool read, uint16_t addr, size_t len, void *arg);
+typedef enum {
+    I2C_SLAVE_STATE_IDLE = 0,
+    I2C_SLAVE_STATE_WAIT_REG_ADDR1,
+    I2C_SLAVE_STATE_WAIT_REG_ADDR2,
+    I2C_SLAVE_STATE_WAIT_RW,
+    I2C_SLAVE_STATE_READING,
+    I2C_SLAVE_STATE_WRITING
+} i2c_slave_state_t;
+/** @} */
+
+/**
+ * @brief   I2C slave state machine context
+ */
+typedef struct {
+  void *arg;  /**< user context */
+  uint16_t reg_addr; /**< address of the requested register */
+  i2c_slave_state_t state; /**< current state of the FSM */
+  uint8_t flags;   /**< I2C flags (I2C_REG16) */
+  i2c_salve_prepare_callback_t prepare; /**< application callback to setup buffers */
+  i2c_salve_finish_callback_t finish; /**< application callback to notify end of transaction */
+  uint8_t *data;  /**< R/W buffer from application */
+  size_t len; /**< R/W buffer size */
+  size_t index; /**< R/W buffer current position */
+} i2c_slave_fsm_t;
+
+extern i2c_slave_fsm_t *i2c_slave_fsm;
+
+/**
+ * @brief   Register a state machine used by I2C slave
+ *
+ * The state machine is reset, and ready to be used in the next transaction
+ *
+ * @param[in] fsm           the state machine
+ */
+void i2c_slave_reg(i2c_slave_fsm_t *fsm, i2c_salve_prepare_callback_t prepare, i2c_salve_finish_callback_t finish, uint8_t flags, void *arg);
+
+/**
+ * @brief   Remove the I2C slave state machine
+ */
+void i2c_slave_reg_clear(void);
+
+/**
+ * @brief   Reset the state machine used by I2C slave
+ *
+ * The state machine is reset, and ready to be used in the next transaction
+ *
+ * @param[in] fsm           the state machine
+ */
+void i2c_slave_reset_fsm(i2c_slave_fsm_t *fsm);
 
 /**
  * @brief   Get mutually exclusive access to the given I2C bus
diff --git a/drivers/periph_common/i2c.c b/drivers/periph_common/i2c.c
index b5e036bd6a..5f87158201 100644
--- a/drivers/periph_common/i2c.c
+++ b/drivers/periph_common/i2c.c
@@ -101,3 +101,31 @@ int i2c_write_regs(i2c_t dev, uint16_t addr, uint16_t reg,
     return i2c_write_bytes(dev, addr, data, len, flags | I2C_NOSTART);
 }
 #endif /* PERIPH_I2C_NEED_WRITE_REGS */
+
+
+i2c_slave_fsm_t *i2c_slave_fsm = NULL;
+
+void i2c_slave_reset_fsm(i2c_slave_fsm_t *fsm)
+{
+  fsm->reg_addr = 0;
+  fsm->state = I2C_SLAVE_STATE_IDLE;
+  fsm->data = NULL;
+  fsm->len = 0;
+  fsm->index = 0;
+}
+
+void i2c_slave_reg_clear(void)
+{
+  i2c_slave_fsm = NULL;
+}
+
+void i2c_slave_reg(i2c_slave_fsm_t *fsm, i2c_salve_prepare_callback_t prepare, i2c_salve_finish_callback_t finish, uint8_t flags, void *arg)
+{
+  i2c_slave_reset_fsm(fsm);
+  fsm->prepare = prepare;
+  fsm->finish = finish;
+  fsm->flags = flags;
+  fsm->arg = arg;
+
+  i2c_slave_fsm = fsm;
+}
diff --git a/tests/periph/i2c/main.c b/tests/periph/i2c/main.c
index 3d27345dd3..8e9ebbb025 100644
--- a/tests/periph/i2c/main.c
+++ b/tests/periph/i2c/main.c
@@ -44,6 +44,7 @@
 
 /* i2c_buf is global to reduce stack memory consumption */
 static uint8_t i2c_buf[BUFSIZE];
+static i2c_slave_fsm_t fsm;
 
 static inline void _print_i2c_read(i2c_t dev, uint16_t *reg, uint8_t *buf,
     int len)
@@ -481,6 +482,73 @@ int cmd_i2c_get_id(int argc, char **argv)
     return 0;
 }
 
+uint8_t i2c_slave_prepare_callback (bool read, uint16_t addr, uint8_t **data, void *arg)
+{
+  (void) arg;
+
+  if (read) {
+    printf("I2C master wants to read register 0x%04X\n", addr);
+
+    // The size of your register may be variable
+    uint8_t size = 8;
+
+    // Prepare a payload to serve
+    for (int i = 0; i < 8; i++) {
+      i2c_buf[i] = 0x20 + i;
+    }
+
+    // Return the payload data and size;
+    *data = i2c_buf;
+    return size;
+  } else {
+    printf("I2C master wants to write into register 0x%04X\n", addr);
+
+    // The size of your register may be variable
+    uint8_t size = 4;
+
+    // Return the payload data and available size;
+    *data = i2c_buf;
+    return size;
+  }
+}
+
+void i2c_slave_finish_callback (bool read, uint16_t addr, size_t len, void *arg)
+{
+  (void) arg;
+
+  if (read) {
+    printf("I2C master have read %u bytes for register 0x%04X\n", len, addr);
+  } else {
+    printf("I2C master have write %u bytes into register 0x%04X\n", len, addr);
+    printf("[");
+    for (size_t i = 0; i < len; i++) {
+        if (i != 0) {
+            printf(", ");
+        }
+        printf("0x%02x", i2c_buf[i]);
+    }
+    puts("]");
+  }
+}
+
+int cmd_i2c_slave_reg(int argc, char **argv)
+{
+    (void)argv;
+    (void)argc;
+    i2c_slave_reg(&fsm, i2c_slave_prepare_callback, i2c_slave_finish_callback, 0, NULL);
+    puts("Success: Setup i2c slave mode");
+    return 0;
+}
+
+int cmd_i2c_slave_reg_clear(int argc, char **argv)
+{
+    (void)argv;
+    (void)argc;
+    i2c_slave_reg_clear();
+    puts("Success: Setup i2c slave mode stopped");
+    return 0;
+}
+
 static const shell_command_t shell_commands[] = {
     { "i2c_acquire", "Get access to the I2C bus", cmd_i2c_acquire },
     { "i2c_release", "Release to the I2C bus", cmd_i2c_release },
@@ -497,6 +565,9 @@ static const shell_command_t shell_commands[] = {
     { "i2c_write_regs", "Write bytes to registers", cmd_i2c_write_regs },
     { "i2c_get_devs", "Gets amount of supported i2c devices", cmd_i2c_get_devs },
     { "i2c_get_id", "Get the id of the fw", cmd_i2c_get_id },
+    { "i2c_slave_reg", "Handle I2C slave read/write access to registers", cmd_i2c_slave_reg },
+    { "i2c_slave_reg_clear", "STOP I2C slave read/write access to registers", cmd_i2c_slave_reg_clear },
+
     { NULL, NULL, NULL }
 };
 
-- 
2.47.0

